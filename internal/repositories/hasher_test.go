package repositories

import (
	mathRand "math/rand"
	"net/http/httptest"
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func TestCalkHash(t *testing.T) {
	strBody2 := `5b7b226964223a22416c6c6f63222c2274797065223a226761756765222
	c2276616c7565223a3739333837327d2c7b226964223a224275636b48617368537973222c
	2274797065223a226761756765222c2276616c7565223a373434377d2c7b226964223a224
	672656573222c2274797065223a226761756765222c2276616c7565223a32317d2c7b2269
	64223a2247434350554672616374696f6e222c2274797065223a226761756765222c22766
	16c7565223a307d2c7b226964223a224743537973222c2274797065223a22676175676522
	2c2276616c7565223a313734353732387d2c7b226964223a2248656170416c6c6f63222c2
	274797065223a226761756765222c2276616c7565223a3739333837327d2c7b226964223a
	224865617049646c65222c2274797065223a226761756765222c2276616c7565223a32343
	4393430387d2c7b226964223a2248656170496e757365222c2274797065223a2267617567
	65222c2276616c7565223a313338343434387d2c7b226964223a22486561704f626a65637
	473222c2274797065223a226761756765222c2276616c7565223a3730307d2c7b22696422
	3a224865617052656c6561736564222c2274797065223a226761756765222c2276616c756
	5223a323434393430387d2c7b226964223a2248656170537973222c2274797065223a2267
	61756765222c2276616c7565223a333833333835367d2c7b226964223a224c61737447432
	22c2274797065223a226761756765222c2276616c7565223a307d2c7b226964223a224c6f
	6f6b757073222c2274797065223a226761756765222c2276616c7565223a307d2c7b22696
	4223a224d4361636865496e757365222c2274797065223a226761756765222c2276616c75
	65223a31393230307d2c7b226964223a224d4361636865537973222c2274797065223a226
	761756765222c2276616c7565223a33313230307d2c7b226964223a224d5370616e496e75
	7365222c2274797065223a226761756765222c2276616c7565223a32343830307d2c7b226
	964223a224d5370616e537973222c2274797065223a226761756765222c2276616c756522
	3a33323634307d2c7b226964223a224d616c6c6f6373222c2274797065223a22676175676
	5222c2276616c7565223a3732317d2c7b226964223a224e6578744743222c227479706522
	3a226761756765222c2276616c7565223a343139343330347d2c7b226964223a224e756d4
	66f726365644743222c2274797065223a226761756765222c2276616c7565223a307d2c7b
	226964223a224e756d4743222c2274797065223a226761756765222c2276616c7565223a3
	07d2c7b226964223a224f74686572537973222c2274797065223a226761756765222c2276
	616c7565223a3633313338357d2c7b226964223a225061757365546f74616c4e73222c227
	4797065223a226761756765222c2276616c7565223a307d2c7b226964223a22537461636b4
	96e757365222c2274797065223a226761756765222c2276616c7565223a3336303434387d2
	c7b226964223a22537461636b537973222c2274797065223a226761756765222c2276616c7
	565223a3336303434387d2c7b226964223a22537973222c2274797065223a22676175676522
	2c2276616c7565223a363634323730347d2c7b226964223a22546f74616c416c6c6f63222c2
	274797065223a226761756765222c2276616c7565223a3739333837327d2c7b226964223a2
	2506f6c6c436f756e74222c2274797065223a22636f756e746572222c2264656c7461223a3
	17d2c7b226964223a2252616e646f6d56616c7565222c2274797065223a226761756765222
	c2276616c7565223a3739333837327d5d0a`
	body2 := []byte(strBody2)

	type args struct {
		body []byte
		key  string
	}
	tests := []struct {
		name      string
		args      args
		argsWant  args
		wantErr   bool
		wantEqual bool
	}{
		{
			name: "ok #1",
			args: args{
				body: []byte("first body to check"),
				key:  "secretKey",
			},
			argsWant: args{
				body: []byte("first body to check"),
				key:  "secretKey",
			},
			wantErr:   false,
			wantEqual: true,
		},
		{
			name: "ok #2",
			args: args{
				body: body2,
				key:  "secretKey",
			},
			argsWant: args{
				body: body2,
				key:  "secretKey",
			},
			wantErr:   false,
			wantEqual: true,
		},
		{
			name: "different key, faile #1",
			args: args{
				body: body2,
				key:  "secretKey",
			},
			argsWant: args{
				body: body2,
				key:  "differentKey",
			},
			wantErr:   false,
			wantEqual: false,
		},
		{
			name: "different body, faile #2",
			args: args{
				body: body2,
				key:  "secretKey",
			},
			argsWant: args{
				body: []byte("different body"),
				key:  "secretKey",
			},
			wantErr:   false,
			wantEqual: false,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got, err := CalkHash(tt.args.body, tt.args.key)
			if !tt.wantErr {
				require.NoError(t, err)
			}
			want, err := CalkHash(tt.argsWant.body, tt.argsWant.key)
			if !tt.wantErr {
				require.NoError(t, err)
			}
			if tt.wantEqual {
				assert.Equal(t, want, got)
			} else {
				assert.NotEqual(t, want, got)
			}

		})
	}
}

func TestCheckHash(t *testing.T) {
	strBody2 := `5b7b226964223a22416c6c6f63222c2274797065223a226761756765222
	c2276616c7565223a3739333837327d2c7b226964223a224275636b48617368537973222c
	2274797065223a226761756765222c2276616c7565223a373434377d2c7b226964223a224
	672656573222c2274797065223a226761756765222c2276616c7565223a32317d2c7b2269
	64223a2247434350554672616374696f6e222c2274797065223a226761756765222c22766
	16c7565223a307d2c7b226964223a224743537973222c2274797065223a22676175676522
	2c2276616c7565223a313734353732387d2c7b226964223a2248656170416c6c6f63222c2
	274797065223a226761756765222c2276616c7565223a3739333837327d2c7b226964223a
	224865617049646c65222c2274797065223a226761756765222c2276616c7565223a32343
	4393430387d2c7b226964223a2248656170496e757365222c2274797065223a2267617567
	65222c2276616c7565223a313338343434387d2c7b226964223a22486561704f626a65637
	473222c2274797065223a226761756765222c2276616c7565223a3730307d2c7b22696422
	3a224865617052656c6561736564222c2274797065223a226761756765222c2276616c756
	5223a323434393430387d2c7b226964223a2248656170537973222c2274797065223a2267
	61756765222c2276616c7565223a333833333835367d2c7b226964223a224c61737447432
	22c2274797065223a226761756765222c2276616c7565223a307d2c7b226964223a224c6f
	6f6b757073222c2274797065223a226761756765222c2276616c7565223a307d2c7b22696
	4223a224d4361636865496e757365222c2274797065223a226761756765222c2276616c75
	65223a31393230307d2c7b226964223a224d4361636865537973222c2274797065223a226
	761756765222c2276616c7565223a33313230307d2c7b226964223a224d5370616e496e75
	7365222c2274797065223a226761756765222c2276616c7565223a32343830307d2c7b226
	964223a224d5370616e537973222c2274797065223a226761756765222c2276616c756522
	3a33323634307d2c7b226964223a224d616c6c6f6373222c2274797065223a22676175676
	5222c2276616c7565223a3732317d2c7b226964223a224e6578744743222c227479706522
	3a226761756765222c2276616c7565223a343139343330347d2c7b226964223a224e756d4
	66f726365644743222c2274797065223a226761756765222c2276616c7565223a307d2c7b
	226964223a224e756d4743222c2274797065223a226761756765222c2276616c7565223a3
	07d2c7b226964223a224f74686572537973222c2274797065223a226761756765222c2276
	616c7565223a3633313338357d2c7b226964223a225061757365546f74616c4e73222c227
	4797065223a226761756765222c2276616c7565223a307d2c7b226964223a22537461636b4
	96e757365222c2274797065223a226761756765222c2276616c7565223a3336303434387d2
	c7b226964223a22537461636b537973222c2274797065223a226761756765222c2276616c7
	565223a3336303434387d2c7b226964223a22537973222c2274797065223a22676175676522
	2c2276616c7565223a363634323730347d2c7b226964223a22546f74616c416c6c6f63222c2
	274797065223a226761756765222c2276616c7565223a3739333837327d2c7b226964223a2
	2506f6c6c436f756e74222c2274797065223a22636f756e746572222c2264656c7461223a3
	17d2c7b226964223a2252616e646f6d56616c7565222c2274797065223a226761756765222
	c2276616c7565223a3739333837327d5d0a`
	body2 := []byte(strBody2)

	type args struct {
		body []byte
		key  string
	}
	tests := []struct {
		name       string
		body       []byte
		key        string
		wantArgs   args
		wantResult bool
		wantErr    bool
	}{
		{
			name: "ok #1",
			body: []byte("first body for ok test"),
			key:  "secret key",
			wantArgs: args{
				body: []byte("first body for ok test"),
				key:  "secret key",
			},
			wantResult: true,
			wantErr:    false,
		},
		{
			name: "ok #2",
			body: body2,
			key:  "secret key",
			wantArgs: args{
				body: body2,
				key:  "secret key",
			},
			wantResult: true,
			wantErr:    false,
		},
		{
			name: "different key, faile #1",
			body: body2,
			key:  "different key",
			wantArgs: args{
				body: body2,
				key:  "secret key",
			},
			wantResult: false,
			wantErr:    false,
		},
		{
			name: "different body, faile #2",
			body: []byte("different body"),
			key:  "secret key",
			wantArgs: args{
				body: body2,
				key:  "secret key",
			},
			wantResult: false,
			wantErr:    false,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			wantHash, err := CalkHash(tt.wantArgs.body, tt.wantArgs.key)
			require.NoError(t, err)
			ok, err := CheckHash(tt.body, wantHash, tt.key)

			if tt.wantErr {
				require.Error(t, err)
			} else {
				require.NoError(t, err)
			}
			assert.Equal(t, tt.wantResult, ok)
		})
	}
}

func TestNewHashWriter(t *testing.T) {
	// Создаю поддельный http.ResponseWriter
	mockResponseWriter := httptest.NewRecorder()

	expectedKey := "testKey"

	hashWriter := NewHashWriter(mockResponseWriter, expectedKey)

	// Проверяю, что структура инициализирована корректно
	if hashWriter.w != mockResponseWriter {
		t.Errorf("Expected ResponseWriter to be %v, but got %v", mockResponseWriter, hashWriter.w)
	}
	assert.Equal(t, mockResponseWriter, hashWriter.w)
	assert.Equal(t, expectedKey, hashWriter.key)
}

func TestHashWriter_Header(t *testing.T) {
	mockResponseWriter := httptest.NewRecorder()
	expectedKey := "testKey"

	headerKey := "first header"
	headerValue := "first value"
	mockResponseWriter.Header().Add(headerKey, headerValue)

	hashWriter := NewHashWriter(mockResponseWriter, expectedKey)
	header := hashWriter.Header()
	assert.Equal(t, headerValue, header.Get(headerKey))
}

func TestTestHashWriter_Write(t *testing.T) {
	// функция для генерации тестового тела
	randomData := func(rnd *mathRand.Rand, n int) []byte {
		b := make([]byte, n)
		_, err := rnd.Read(b)
		require.NoError(t, err)
		return b
	}

	mockResponseWriter := httptest.NewRecorder()
	key := "testKey"

	hashWriter := NewHashWriter(mockResponseWriter, key)

	rnd := mathRand.New(mathRand.NewSource(79))
	testBody := randomData(rnd, 256)

	n, err := hashWriter.Write(testBody)
	assert.Equal(t, len(testBody), n)
	require.NoError(t, err)

	// вычисляю хэш вручную для проверки
	hashOfTestBody, err := CalkHash(testBody, key)
	require.NoError(t, err)

	// получаю хэш полученный при записи данных
	header := hashWriter.Header()
	getHash := header.Get("HashSHA256")

	// сравниваю хэши
	assert.Equal(t, hashOfTestBody, getHash)
}

func TestTestHashWriter_WriteHeader(t *testing.T) {
	mockResponseWriter := httptest.NewRecorder()
	key := "testKey"
	hashWriter := NewHashWriter(mockResponseWriter, key)

	wantHeader := 400
	hashWriter.WriteHeader(wantHeader)

	res := mockResponseWriter.Result()
	res.Body.Close()

	assert.Equal(t, wantHeader, res.StatusCode)
}
